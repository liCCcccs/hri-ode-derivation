


syms l1 l2 l3 l4
syms lc1 la1 lb1 lc2 lc3 lc4 la4 la2
syms q1 h_q2 dq1 h_dq2 ddq1 h_ddq2 
syms r_d2 r_dd2 r_ddd2
syms r_d3 r_dd3 r_ddd3
syms r_q4 r_dq4 r_ddq4
syms r_q5 r_dq5 r_ddq5
syms K_AFz K_AFx K_AMy
syms K_BFz K_BFx K_BMy
syms m1 m2 m3 m4 g
syms I_G1z I_G2z I_G3z I_G4z
syms tau1 tau2 tau3 tau4
q1 = 0; dq1 = 0; ddq1 = 0;
%h_q2 = 0; h_dq2 = 0; h_ddq2 = 0;
%r_q4 = 0; r_dq4 = 0; r_ddq4 = 0;
%r_q5 = 0; r_dq5 = 0; r_ddq5 = 0;
%r_d2 = 0; r_dd2 = 0; r_ddd2 = 0;
%r_d3 = 0; r_dd3 = 0; r_ddd3 = 0;

eqns = [%tau1 = I_G1z*ddq1 + I_G2z*ddq1 + I_G2z*h_ddq2 + K_BMy*h_q2 + K_AMy*r_q4 - K_BMy*r_q4 - K_BMy*r_q5 + h_ddq2*lc2^2*m2 - (K_BFx*l1*r_d2)/2 - (K_BFz*l1*r_d2)/2 + K_AFz*lc1*r_d2 + K_BFx*lc1*r_d2 + K_BFz*lc1*r_d2 - (K_BFx*l1^2*sin(2*h_q2))/2 + (K_BFz*l1^2*sin(2*h_q2))/2 + ddq1*lc1^2*m1 + ddq1*lc2^2*m2 - (K_BFx*l1*la4*sin(r_q4 - 2*h_q2 + r_q5))/2 + (K_BFz*l1*la4*sin(r_q4 - 2*h_q2 + r_q5))/2 + K_BFx*la4*lc1*sin(r_q4 - 2*h_q2 + r_q5) - K_BFz*la4*lc1*sin(r_q4 - 2*h_q2 + r_q5) - K_BFz*la4*lc2*sin(r_q4 - h_q2 + r_q5) + (ddq1*l1*lc1*m2)/2 + (h_ddq2*l1*lc1*m2)/2 - l1*m4*r_ddd2*cos(r_q4 - h_q2 + r_q5) + lc1*m4*r_ddd2*cos(r_q4 - h_q2 + r_q5) - l1*m4*r_ddd3*sin(r_q4 - h_q2 + r_q5) + lc1*m4*r_ddd3*sin(r_q4 - h_q2 + r_q5) + (K_BFx*l1*la4*sin(r_q4 + r_q5))/2 + (K_BFz*l1*la4*sin(r_q4 + r_q5))/2 - K_BFx*la4*lc1*sin(r_q4 + r_q5) - K_BFz*la4*lc1*sin(r_q4 + r_q5) + g*lc2*m2*sin(h_q2 + q1) + K_BFz*lc2*r_d2*cos(h_q2) - K_BFx*l1*la2*sin(h_q2) - K_BFz*l1*lc2*sin(h_q2) + 2*K_BFx*la2*lc1*sin(h_q2) + K_BFz*la1*lc2*sin(h_q2) + K_BFz*lc2*r_d3*sin(h_q2) + (K_BFx*l1*l3*sin(r_q4))/2 + (K_BFz*l1*l3*sin(r_q4))/2 - K_BFx*l3*lc1*sin(r_q4) - K_BFz*l3*lc1*sin(r_q4) + g*lc1*m1*sin(q1) + g*lc1*m2*sin(q1) + g*l1*m4*sin(q1 - h_q2 + r_q4 + r_q5) + K_BFz*l3*lc2*sin(h_q2 - r_q4) - g*lc1*m4*sin(q1 - h_q2 + r_q4 + r_q5) + (K_BFx*l1*r_d2*cos(2*h_q2))/2 - (K_BFz*l1*r_d2*cos(2*h_q2))/2 - K_BFx*lc1*r_d2*cos(2*h_q2) + K_BFz*lc1*r_d2*cos(2*h_q2) + (K_BFx*l1*la1*sin(2*h_q2))/2 - (K_BFz*l1*la1*sin(2*h_q2))/2 + K_BFx*l1*lc1*sin(2*h_q2) - K_BFz*l1*lc1*sin(2*h_q2) - K_BFx*la1*lc1*sin(2*h_q2) + K_BFz*la1*lc1*sin(2*h_q2) + (K_BFx*l1*r_d3*sin(2*h_q2))/2 - (K_BFz*l1*r_d3*sin(2*h_q2))/2 - K_BFx*lc1*r_d3*sin(2*h_q2) + K_BFz*lc1*r_d3*sin(2*h_q2) + (K_BFx*l1*l3*sin(2*h_q2 - r_q4))/2 - (K_BFz*l1*l3*sin(2*h_q2 - r_q4))/2 - K_BFx*l3*lc1*sin(2*h_q2 - r_q4) + K_BFz*l3*lc1*sin(2*h_q2 - r_q4) + l1*l3*m4*r_ddq4*cos(h_q2 - r_q5) - l3*lc1*m4*r_ddq4*cos(h_q2 - r_q5) + (ddq1*l1*lc1*m2*cos(2*h_q2))/2 - (h_ddq2*l1*lc1*m2*cos(2*h_q2))/2 + dq1^2*l1*lc2*m2*sin(h_q2) - dq1^2*lc1*lc2*m2*sin(h_q2) - h_dq2^2*lc1*lc2*m2*sin(h_q2) - l1*la4*m4*r_dq5^2*sin(h_q2) + la4*lc1*m4*r_dq5^2*sin(h_q2) - l1*l3*m4*r_dq4^2*sin(h_q2 - r_q5) + l3*lc1*m4*r_dq4^2*sin(h_q2 - r_q5) + ddq1*l1*la1*m4*sin(r_q4 - h_q2 + r_q5) - ddq1*la1*lc1*m4*sin(r_q4 - h_q2 + r_q5) + ddq1*l1*lc2*m2*cos(h_q2) + ddq1*lc1*lc2*m2*cos(h_q2) + dq1^2*l1*la1*m4*cos(r_q4 - h_q2 + r_q5) - dq1^2*la1*lc1*m4*cos(r_q4 - h_q2 + r_q5) + h_ddq2*lc1*lc2*m2*cos(h_q2) + l1*la4*m4*r_ddq5*cos(h_q2) - la4*lc1*m4*r_ddq5*cos(h_q2) - 2*dq1*h_dq2*lc1*lc2*m2*sin(h_q2);
        tau2 == I_G2z*ddq1 + I_G2z*h_ddq2 + K_BMy*h_q2 - K_BMy*r_q4 - K_BMy*r_q5 + h_ddq2*lc2^2*m2 + ddq1*lc2^2*m2 - K_BFz*la4*lc2*sin(r_q4 - h_q2 + r_q5) + g*lc2*m2*sin(h_q2 + q1) + K_BFz*lc2*r_d2*cos(h_q2) - K_BFz*l1*lc2*sin(h_q2) + K_BFz*la1*lc2*sin(h_q2) + K_BFz*lc2*r_d3*sin(h_q2) + K_BFz*l3*lc2*sin(h_q2 - r_q4) + dq1^2*l1*lc2*m2*sin(h_q2) + ddq1*l1*lc2*m2*cos(h_q2);

        tau3 == 2*I_G4z*ddq1 - K_BMy*h_q2 + 2*I_G4z*r_ddq4 + I_G4z*r_ddq5 + K_AMy*r_q4 + K_BMy*r_q4 + K_BMy*r_q5 + l3^2*m4*r_ddq4 + lc3^2*m3*r_ddq4 - K_AFz*lc3*r_d2 + (K_BFx*l3^2*sin(h_q2 - r_q4 + r_q5))/2 + (K_BFx*l3^2*sin(r_q4 - h_q2 + r_q5))/2 - (K_BFz*l3^2*sin(h_q2 - r_q4 + r_q5))/2 + (K_BFz*l3^2*sin(r_q4 - h_q2 + r_q5))/2 + K_BFz*la4*lc4*sin(r_q4 - h_q2 + r_q5) + la4*lc4*m4*r_ddq5 + (K_BFx*l3*r_d2*cos(h_q2 + r_q5))/2 - (K_BFz*l3*r_d2*cos(h_q2 + r_q5))/2 - (K_BFx*l1*l3*sin(h_q2 + r_q5))/2 + (K_BFz*l1*l3*sin(h_q2 + r_q5))/2 + (K_BFx*l3*la1*sin(h_q2 + r_q5))/2 - (K_BFz*l3*la1*sin(h_q2 + r_q5))/2 + (K_BFx*l3*r_d3*sin(h_q2 + r_q5))/2 - (K_BFz*l3*r_d3*sin(h_q2 + r_q5))/2 - lc4*m4*r_ddd2*cos(r_q4 + r_q5) - K_BFz*lc4*r_d2*cos(h_q2) + g*l3*m4*sin(q1 + r_q4) + g*lc3*m3*sin(q1 + r_q4) + K_BFz*l1*lc4*sin(h_q2) - K_BFz*la1*lc4*sin(h_q2) + (K_BFx*l3*la4*sin(r_q4 - h_q2 + 2*r_q5))/2 + (K_BFz*l3*la4*sin(r_q4 - h_q2 + 2*r_q5))/2 - lc4*m4*r_ddd3*sin(r_q4 + r_q5) - K_BFz*lc4*r_d3*sin(h_q2) - K_BFx*l3*la2*sin(r_q5) - l3*m4*r_ddd2*cos(r_q4) - lc3*m3*r_ddd2*cos(r_q4) - (K_BFx*l3*r_d2*cos(h_q2 - r_q5))/2 - (K_BFz*l3*r_d2*cos(h_q2 - r_q5))/2 + (K_BFx*l1*l3*sin(h_q2 - r_q5))/2 + (K_BFz*l1*l3*sin(h_q2 - r_q5))/2 - (K_BFx*l3*la1*sin(h_q2 - r_q5))/2 + (K_BFx*l3*la4*sin(h_q2 - r_q4))/2 - (K_BFz*l3*la1*sin(h_q2 - r_q5))/2 - (K_BFz*l3*la4*sin(h_q2 - r_q4))/2 - K_BFz*l3*lc4*sin(h_q2 - r_q4) - l3*m4*r_ddd3*sin(r_q4) - lc3*m3*r_ddd3*sin(r_q4) - (K_BFx*l3*r_d3*sin(h_q2 - r_q5))/2 - (K_BFz*l3*r_d3*sin(h_q2 - r_q5))/2 + g*lc4*m4*sin(q1 + r_q4 + r_q5) + dq1^2*la1*lc4*m4*cos(r_q4 + r_q5) + dq1^2*l3*la1*m4*cos(r_q4) + dq1^2*la1*lc3*m3*cos(r_q4) - l3*la4*m4*r_dq5^2*sin(r_q5) + l3*lc4*m4*r_dq4^2*sin(r_q5) + ddq1*la1*lc4*m4*sin(r_q4 + r_q5) + l3*la4*m4*r_ddq5*cos(r_q5) + l3*lc4*m4*r_ddq4*cos(r_q5) + ddq1*l3*la1*m4*sin(r_q4) + ddq1*la1*lc3*m3*sin(r_q4);
        tau4 == la1*lc4*m4*cos(r_q4 + r_q5)*dq1^2 + l3*lc4*m4*sin(r_q5)*r_dq4^2 + I_G4z*ddq1 - K_BMy*h_q2 + I_G4z*r_ddq4 + I_G4z*r_ddq5 + K_BMy*r_q4 + K_BMy*r_q5 + K_BFz*la4*lc4*sin(r_q4 - h_q2 + r_q5) + la4*lc4*m4*r_ddq5 - lc4*m4*r_ddd2*cos(r_q4 + r_q5) - K_BFz*lc4*r_d2*cos(h_q2) + K_BFz*l1*lc4*sin(h_q2) - K_BFz*la1*lc4*sin(h_q2) - lc4*m4*r_ddd3*sin(r_q4 + r_q5) - K_BFz*lc4*r_d3*sin(h_q2) - K_BFz*l3*lc4*sin(h_q2 - r_q4) + g*lc4*m4*sin(q1 + r_q4 + r_q5) + ddq1*la1*lc4*m4*sin(r_q4 + r_q5) + l3*lc4*m4*r_ddq4*cos(r_q5);

        0 == K_AFx*r_d3 - l3*m4*r_dq4^2 - lc3*m3*r_dq4^2 - (K_BFx*l1*cos(h_q2 - r_q5))/2 - (K_BFz*l1*cos(h_q2 - r_q5))/2 + (K_BFx*la1*cos(h_q2 - r_q5))/2 + (K_BFx*la4*cos(h_q2 - r_q4))/2 + (K_BFz*la1*cos(h_q2 - r_q5))/2 - (K_BFz*la4*cos(h_q2 - r_q4))/2 + m3*r_ddd3*cos(r_q4) + m4*r_ddd3*cos(r_q4) + (K_BFx*r_d3*cos(h_q2 - r_q5))/2 + (K_BFz*r_d3*cos(h_q2 - r_q5))/2 - m3*r_ddd2*sin(r_q4) - m4*r_ddd2*sin(r_q4) - (K_BFx*r_d2*sin(h_q2 - r_q5))/2 - (K_BFz*r_d2*sin(h_q2 - r_q5))/2 + (K_BFx*l3*cos(h_q2 - r_q4 + r_q5))/2 + (K_BFx*l3*cos(r_q4 - h_q2 + r_q5))/2 - (K_BFz*l3*cos(h_q2 - r_q4 + r_q5))/2 + (K_BFz*l3*cos(r_q4 - h_q2 + r_q5))/2 - (K_BFx*l1*cos(h_q2 + r_q5))/2 + (K_BFz*l1*cos(h_q2 + r_q5))/2 + (K_BFx*la1*cos(h_q2 + r_q5))/2 - (K_BFz*la1*cos(h_q2 + r_q5))/2 + (K_BFx*r_d3*cos(h_q2 + r_q5))/2 - (K_BFz*r_d3*cos(h_q2 + r_q5))/2 - (K_BFx*r_d2*sin(h_q2 + r_q5))/2 + (K_BFz*r_d2*sin(h_q2 + r_q5))/2 - g*m3*cos(q1 + r_q4) - g*m4*cos(q1 + r_q4) + (K_BFx*la4*cos(r_q4 - h_q2 + 2*r_q5))/2 + (K_BFz*la4*cos(r_q4 - h_q2 + 2*r_q5))/2 - K_BFx*la2*cos(r_q5) - ddq1*la1*m3*cos(r_q4) - ddq1*la1*m4*cos(r_q4) - la4*m4*r_ddq5*sin(r_q5) - la4*m4*r_dq5^2*cos(r_q5) + dq1^2*la1*m3*sin(r_q4) + dq1^2*la1*m4*sin(r_q4);
        0 == (K_BFx*l1*sin(h_q2 - r_q5))/2 - m3*r_ddd2*cos(r_q4) - m4*r_ddd2*cos(r_q4) - (K_BFx*r_d2*cos(h_q2 - r_q5))/2 - (K_BFz*r_d2*cos(h_q2 - r_q5))/2 - K_AFz*r_d2 + (K_BFz*l1*sin(h_q2 - r_q5))/2 - (K_BFx*la1*sin(h_q2 - r_q5))/2 + (K_BFx*la4*sin(h_q2 - r_q4))/2 - (K_BFz*la1*sin(h_q2 - r_q5))/2 - (K_BFz*la4*sin(h_q2 - r_q4))/2 - m3*r_ddd3*sin(r_q4) - m4*r_ddd3*sin(r_q4) - (K_BFx*r_d3*sin(h_q2 - r_q5))/2 - (K_BFz*r_d3*sin(h_q2 - r_q5))/2 + (K_BFx*l3*sin(h_q2 - r_q4 + r_q5))/2 + (K_BFx*l3*sin(r_q4 - h_q2 + r_q5))/2 - (K_BFz*l3*sin(h_q2 - r_q4 + r_q5))/2 + (K_BFz*l3*sin(r_q4 - h_q2 + r_q5))/2 + l3*m4*r_ddq4 + lc3*m3*r_ddq4 + (K_BFx*r_d2*cos(h_q2 + r_q5))/2 - (K_BFz*r_d2*cos(h_q2 + r_q5))/2 - (K_BFx*l1*sin(h_q2 + r_q5))/2 + (K_BFz*l1*sin(h_q2 + r_q5))/2 + (K_BFx*la1*sin(h_q2 + r_q5))/2 - (K_BFz*la1*sin(h_q2 + r_q5))/2 + (K_BFx*r_d3*sin(h_q2 + r_q5))/2 - (K_BFz*r_d3*sin(h_q2 + r_q5))/2 + g*m3*sin(q1 + r_q4) + g*m4*sin(q1 + r_q4) + (K_BFx*la4*sin(r_q4 - h_q2 + 2*r_q5))/2 + (K_BFz*la4*sin(r_q4 - h_q2 + 2*r_q5))/2 - K_BFx*la2*sin(r_q5) + la4*m4*r_ddq5*cos(r_q5) + ddq1*la1*m3*sin(r_q4) + ddq1*la1*m4*sin(r_q4) + dq1^2*la1*m3*cos(r_q4) + dq1^2*la1*m4*cos(r_q4) - la4*m4*r_dq5^2*sin(r_q5)

        ];

%tobeElimitedVars = [];
%expr = eliminate(eqns, tobeElimitedVars);
ddthetaSolved = solve(eqns, [h_ddq2, r_ddd2, r_ddd3, r_ddq4, r_ddq5]);
%ddthetaSolved = solve(expr, [ddq_2, ddq_3, ddq_4]);

vSym.m1 = 1; vSym.m2 = 1; vSym.m3 = 1; vSym.m4 = 1; vSym.g = 10;
vSym.I_G1z = 1; vSym.I_G2z = 1; vSym.I_G3z = 1; vSym.I_G4z = 1; 
vSym.l1 = 1; vSym.l2 = 1; vSym.l3 = 0.8; vSym.l4 = 0.8;
vSym.lc1 = 0.5; vSym.la1 = 0.2; vSym.lb1 = 0.2; vSym.lc2 = 0.5; 
vSym.lc3 = 0.4; vSym.lc4 = 0.4; vSym.la4 = 0.3; vSym.la2 = 0.3; 
vSym.K_AFz = 50; vSym.K_AFx = 50; vSym.K_AMy = 20;
vSym.K_BFz = 50; vSym.K_BFx = 50; vSym.K_BMy = 20;

%% solve the dynamic equations
tspan = [0 1];
y0 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];  %initial condition
tau = [0, 5, 0, 0];
[t,y] = ode45(@(t,y) runrobot(t,y, ddthetaSolved, tau, vSym), tspan, y0);



%% Visualise
% dt = 0.1;
% q1 = y(:, 1); h_q2 = y(:, 3); r_d2 = y(:, 5); r_d3 = y(:, 7); r_q4 = y(:, 9); r_q5 = y(:, 11);
% dq1 = y(:, 2); h_dq2 = y(:, 4); r_dd2 = y(:, 6); r_dd3 = y(:, 8); r_dq4 = y(:, 10); r_dq5 = y(:, 12);
% 
% f_intB = zeros(2, length(y));
% 
% figure('Renderer', 'painters', 'Position', [300 300 800 800])
% for i = 1:length(y)
%     [j1, h_j2, h_j3, r_j2, r_j3, r_j4, r_j5, r_j6, T] = calc_joint_position(vSym, q1(i), h_q2(i), r_d2(i), r_d3(i), r_q4(i), r_q5(i));
%     f_intB(:, i) = T.H3aR6a_T(1:2, 4);
% 
%     clf
%     plot_3d_points({j1, h_j2, h_j3});
%     plot_3d_points({j1, r_j2, r_j3, r_j4, r_j5, r_j6});
% 
%     axis([-2,4,-2,4, -2,4])
%     pause(dt)
% end

%% Calculate differetial equations
function dydt = runrobot(t, y, ddthetaSolved, tau, vSym)

    vVar.q1 = y(1); vVar.dq1 = y(2); 
    vVar.h_q2 = y(3); vVar.h_dq2 = y(4);
    vVar.r_d2 = y(5); vVar.r_dd2 = y(6);
    vVar.r_d3 = y(7); vVar.r_dd3 = y(8);
    vVar.r_q4 = y(9); vVar.r_dq4 = y(10);
    vVar.r_q5 = y(11); vVar.r_dq5 = y(12); 

    vVar.tau1 = tau(1); vVar.tau2 = tau(2); vVar.tau3 = tau(3); vVar.tau4 = tau(4);

    %ddq1 = calc_equation_of_motion(ddthetaSolved.ddq1, symbols, vSym, vVar);
    ddq1 = 0;
    h_ddq2 = calc_equation_of_motion(ddthetaSolved.h_ddq2, vSym, vVar);
    r_ddd2 = calc_equation_of_motion(ddthetaSolved.r_ddd2, vSym, vVar);
    r_ddd3 = calc_equation_of_motion(ddthetaSolved.r_ddd3, vSym, vVar);
    r_ddq4 = calc_equation_of_motion(ddthetaSolved.r_ddq4, vSym, vVar);
    r_ddq5 = calc_equation_of_motion(ddthetaSolved.r_ddq5, vSym, vVar);

    dydt = zeros(12,1);
    dydt(1) = vVar.dq1; dydt(2) = ddq1;
    dydt(3) = vVar.h_dq2; dydt(4) = h_ddq2;
    dydt(5) = vVar.r_dd2; dydt(6) = r_ddd2;
    dydt(7) = vVar.r_dd3; dydt(8) = r_ddd3;
    dydt(9) = vVar.r_dq4; dydt(10) = r_ddq4;
    dydt(11) = vVar.r_dq5; dydt(12) = r_ddq5;
end

function [ddx] = calc_equation_of_motion(sym_eqn, vSym, vVar)
    syms l1 l2 l3 l4
    syms lc1 la1 lb1 lc2  lc3 lc4 la4 la2
    syms q1 h_q2 dq1 h_dq2 ddq1 h_ddq2 
    syms r_d2 r_dd2 r_ddd2
    syms r_d3 r_dd3 r_ddd3
    syms r_q4 r_dq4 r_ddq4
    syms r_q5 r_dq5 r_ddq5
    syms K_AFz K_AFx K_AMy
    syms K_BFz K_BFx K_BMy
    syms m1 m2 m3 m4 g
    syms I_G1z I_G2z I_G3z I_G4z
    syms tau1 tau2 tau3 tau4
    symbols = {m1, m2, m3, m4, g, I_G1z, I_G2z, I_G3z, I_G4z, ...
           l1, l2, l3, l4,...
           lc1, la1, lb1, lc2, lc3, lc4, la4, la2,...
           K_AFz, K_AFx, K_AMy,...
           K_BFz, K_BFx, K_BMy, ...
           q1, dq1, ...
           h_q2, h_dq2,...
           r_d2, r_dd2,...
           r_d3, r_dd3,...
           r_q4, r_dq4,...
           r_q5, r_dq5,...
           tau1, tau2, tau3, tau4};
    symbol_vals = {vSym.m1, vSym.m2, vSym.m3, vSym.m4, vSym.g,...
                   vSym.I_G1z, vSym.I_G2z, vSym.I_G3z, vSym.I_G4z, ...
                   vSym.l1, vSym.l2, vSym.l3, vSym.l4,...
                   vSym.lc1, vSym.la1, vSym.lb1, vSym.lc2, ...
                   vSym.lc3, vSym.lc4, vSym.la4, vSym.la2, ...
                   vSym.K_AFz, vSym.K_AFx, vSym.K_AMy,...
                   vSym.K_BFz, vSym.K_BFx, vSym.K_BMy};
    variable_vals = {vVar.q1, vVar.dq1, ...
                     vVar.h_q2, vVar.h_dq2,...
                     vVar.r_d2, vVar.r_dd2,...
                     vVar.r_d3, vVar.r_dd3,...
                     vVar.r_q4, vVar.r_dq4,...
                     vVar.r_q5, vVar.r_dq5,...
                     vVar.tau1, vVar.tau2, vVar.tau3, vVar.tau4};

    ddx = subs(sym_eqn, symbols, [symbol_vals, variable_vals]);
end

function T = calc_homotransmtx(a_i_1, alpha_i_1, d_i, theta_i)
    % Calculate the transformation matrix based on DH parameters.
    %
    % Parameters:
    % a_i_1 (float): The parameter a_{i-1}
    % alpha_i_1 (float): The parameter alpha_{i-1} (in radians)
    % d_i (float): The parameter d_i
    % theta_i (float): The parameter theta_i (in radians)
    %
    % Returns:
    % T: The transformation matrix

    % First matrix (D_X(a_{i-1}) * R_X(\alpha_{i-1}))
    cos_alpha = cos(alpha_i_1);
    if ~isa(alpha_i_1, 'sym')
        if cos_alpha < 1e-10
            cos_alpha = 0;
        end
    end
    matrix_1 = [1, 0, 0, a_i_1;
                0, cos_alpha,      -sin(alpha_i_1), 0;
                0, sin(alpha_i_1), cos_alpha,       0;
                0, 0, 0, 1];
    % Second matrix (D_Z(d_i) * R_Z(theta_i))
    cos_theta = cos(theta_i);
    if ~isa(theta_i, 'sym')
        if cos_theta < 1e-10
            cos_theta = 0;
        end
    end
    matrix_2 = [cos_theta,    -sin(theta_i), 0, 0;
                sin(theta_i), cos_theta,     0, 0;
                0, 0, 1, d_i;
                0, 0, 0, 1];
    % Matrix multiplication
    T = matrix_1 * matrix_2;
end


function [j1, h_j2, h_j3, r_j2, r_j3, r_j4, r_j5, r_j6, T] = calc_joint_position(vSym, q1, h_q2, r_d2, r_d3, r_q4, r_q5)
    H_T01 = calc_homotransmtx(0, 0, 0, pi/2+q1);
    H_T12 = calc_homotransmtx(vSym.l1, 0, 0, h_q2);
    H_T23 = calc_homotransmtx(vSym.l2, 0, 0, 0);
    H_T23a = calc_homotransmtx(vSym.la2, 0, 0, 0);

    H_T02 = H_T01 * H_T12;
    H_T03 = H_T02 * H_T23;
    H_T03a = H_T02 * H_T23a;
    
    R_T01 = calc_homotransmtx(0, 0, 0, pi/2+q1);
    R_T12 = calc_homotransmtx(vSym.la1, pi/2, r_d2, pi/2);
    R_T23 = calc_homotransmtx(vSym.lb1, pi/2, r_d3, pi/2);
    R_T34 = calc_homotransmtx(0, pi/2, 0, pi/2+r_q4);
    R_T45 = calc_homotransmtx(vSym.l3, 0, 0, r_q5);
    R_T56 = calc_homotransmtx(vSym.l4, 0, 0, 0);
    R_T56a = calc_homotransmtx(vSym.la4, 0, 0, 0);

    R_T02 = R_T01 * R_T12;
    R_T03 = R_T02 * R_T23;
    R_T04 = R_T03 * R_T34;
    R_T05 = R_T04 * R_T45;
    R_T06 = R_T05 * R_T56;
    R_T06a = R_T05 * R_T56a;

    H_T3a0 = inv_homotransmtx(H_T03a);
    T.H3aR6a_T = H_T3a0*R_T06a;

    j1 = [0; 0; 0];
    h_j2 = H_T02(1:3, 4);
    h_j3 = H_T03(1:3, 4);
    r_j2 = R_T02(1:3, 4);
    r_j3 = R_T03(1:3, 4);
    r_j4 = R_T04(1:3, 4);
    r_j5 = R_T05(1:3, 4);
    r_j6 = R_T06(1:3, 4);
end

function plot_3d_points(points)
    % Plot a list of 3D points.
    %
    % Parameters:
    % points: A cell array where each cell contains a 1x3 array of 3D points.

    % Number of points
    numPoints = length(points);

    % Initialize arrays to store the coordinates
    xs = zeros(1, numPoints);
    ys = zeros(1, numPoints);
    zs = zeros(1, numPoints);

    % Extract the x, y, and z coordinates
    for i = 1:numPoints
        xs(i) = points{i}(1);
        ys(i) = points{i}(2);
        zs(i) = points{i}(3);
    end

    % Plot each point as a dot
    scatter3(xs, ys, zs, 'o'); % 'o' is for circle marker

    % Hold on to add lines to the same plot
    hold on;

    % Connect the points with lines
    plot3(xs, ys, zs);

    % Setting labels for axes
    xlabel('X Axis');
    ylabel('Y Axis');
    zlabel('Z Axis');

    % Show the plot
    grid on; % Optional: Adds a grid to the plot
end

function [inv_T] = inv_homotransmtx(T)
    R = T(1:3, 1:3);
    d = T(1:3, 4);
    inv_T = [R.', -R.'*d;
             0,0,0,1];
end

